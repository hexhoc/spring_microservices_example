# by default
spring.profiles.active=dev


# RESILIENCE4J
# circuit breaker for licenseService (licenseService is id for instance of circuit breaker)
# Circuit breaker try to connect 10 times. If more than 50% of that attempt is failed,
# then circuit breaker stop all connect to the service on 20 seconds

# Indicates whether to expose the configuration over the health endpoint
resilience4j.circuitbreaker.instances.licenseService.registerHealthIndicator=true
# Sets the size of the ring bit buffer when the circuit breaker is in the closed state. The default value is 100.
resilience4j.circuitbreaker.instances.licenseService.ringBufferSizeInClosedState=5
# Sets the size of the ring bit buffer when the circuit breaker is in the half-open state. The default value is 10
resilience4j.circuitbreaker.instances.licenseService.ringBufferSizeInHalfOpenState=3
# Sets the time the circuit breaker should wait before changing the status from open to half-open. \
# The default value is 60,000 ms
resilience4j.circuitbreaker.instances.licenseService.waitDurationInOpenState=10s
# Configures the percentage of the failure rate threshold. Remember, when the failure rate is greater than or equal
# to this threshold, the circuit breaker changes to the open state and starts short-circuiting calls. The default value is 50.
resilience4j.circuitbreaker.instances.licenseService.failureRateThreshold=50
# Lists the exceptions that will be considered as failures. By default, all exceptions are recorded as failures
resilience4j.circuitbreaker.instances.licenseService.recordExceptions=\
    org.springframework.web.client.HttpServerErrorException,\
    java.io.IOException,\
    java.util.concurrent.TimeoutException,\
    org.springframework.web.client.ResourceAccessException

# time limiter for organizationService
# if request is execute more than 2s, then terminate it
resilience4j.timelimiter.instances.licenseService.timeout-duration=2s

# circuit breaker for organizationService (organizationService is id for instance of circuit breaker)
resilience4j.circuitbreaker.instances.organizationService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.organizationService.ringBufferSizeInClosedState=6
resilience4j.circuitbreaker.instances.organizationService.ringBufferSizeInHalfOpenState=4
resilience4j.circuitbreaker.instances.organizationService.waitDurationInOpenState=20s
resilience4j.circuitbreaker.instances.organizationService.failureRateThreshold=60
# time limiter for organizationService
# if request is execute more than 2s, then terminate it
resilience4j.timelimiter.instances.organizationService.timeout-duration=2s

# rate limiter
resilience4j.ratelimiter.instances.licenseService.limitForPeriod=5
resilience4j.ratelimiter.instances.licenseService.limitRefreshPeriod=5000
resilience4j.ratelimiter.instances.licenseService.timeoutDuration=1000ms

# retry
resilience4j.retry.instances.retryLicenseService.max-retry-attempts=5
resilience4j.retry.instances.retryLicenseService.waitDuration=10000
resilience4j.retry.instances.retryLicenseService.retry-exceptions=java.util.concurrent.TimeoutException

# bulkhead
resilience4j.bulkhead.instances.bulkheadLicenseService.maxWaitDuration=2ms
resilience4j.bulkhead.instances.bulkheadLicenseService.maxConcurrentCalls=20

# thread-pool-bulkhead
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.maxThreadPoolSize=1
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.coreThreadPoolSize=1
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.queueCapacity=1