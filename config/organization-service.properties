spring.profiles.active=dev

spring.jpa.hibernate.ddl-auto=validate
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql = true
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.database.driverClassName= org.postgresql.Driver
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

server.port= 8081

management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true

# Tells the Config Server to use this value as the symmetric key
encrypt.key=fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo

# Registers the IP address of the service rather than the server name.
# By default, Eureka registers the services that contact it by hostname. This works well
# in a server-based environment, where a service is assigned a DNS-backed hostname.
# However, in a container-based deployment (for example, Docker), containers are
# started with randomly generated hostnames and no DNS entries for the containers
eureka.instance.preferIpAddress = true
# Registers the service with Eureka
# Is the trigger to tell the organization and the licensing services to register with Eureka
eureka.client.registerWithEureka = true
# tells the Spring Eureka client to fetch a local copy of the #registry
# caches the registry locally instead of calling the Eureka service with each lookup
eureka.client.fetchRegistry = true
# Sets the location of the Eureka service.
eureka.client.serviceUrl.defaultZone = http://eurekaserver:8070/eureka/


keycloak.realm = spmia-realm
keycloak.auth-server-url = http://keycloak:8080/auth
keycloak.ssl-required = external
keycloak.resource = ostock
# token-audience is not need, specify as false
keycloak.verify-token-audience = false
keycloak.credentials.secret = V4BXdHSnhjRl4N0uJhPdGDFhF0N2ZdY1
keycloak.use-resource-role-mappings = true
keycloak.confidential-port = 0
keycloak.bearer-only = true


# The Spring Cloud Stream configuration for publishing a message
# channel name
spring.cloud.stream.bindings.output.destination=orgChangeTopic
# Provides (hints) the message type that`s sent and received (in this case, JSON)
spring.cloud.stream.bindings.output.content-type=application/json
# These properties provide the network location of Kafka and Zookeeper.
spring.cloud.stream.kafka.binder.zkNodes=kafka
spring.cloud.stream.kafka.binder.brokers=kafka